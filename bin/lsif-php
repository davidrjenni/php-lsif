#!/usr/bin/env php
<?php

declare(strict_types=1);

include $_composer_autoload_path ?? __DIR__ . '/../vendor/autoload.php';

use LsifPhp\Git\Git;
use LsifPhp\Indexer\Indexer;
use LsifPhp\Protocol\Emitter;
use LsifPhp\Protocol\ToolInfo;

$options = \getopt('h', ['help', 'memory-limit:', 'id:', 'filename:']);
if ($options === false) {
    echo "Cannot parse options.\n";
    exit(1);
}

if (isset($options['h']) || isset($options['help'])) {
    echo "usage: {$argv[0]} [options]\n\n";
    echo "lsif-php is an LSIF indexer for PHP\n\n";
    echo "Options:\n";
    echo "  -h --help               display this help and exit\n";
    echo "     --memory-limit=\"1G\"  memory limit\n";
    echo "     --id=1  the starting element ID to start from\n";
    echo "     --filename=dump.lsif  the name of the file output\n";
    exit(0);
}

$memoryLimit = $options['memory-limit'] ?? '1G';
if (!\is_string($memoryLimit)) {
    echo "Invalid memory limit.\n";
    exit(1);
}

if (\ini_set('memory_limit', $memoryLimit) === false) {
    echo "Cannot set memory limit {$memoryLimit}.\n";
    exit(1);
}

$id = intval($options['id'] ?? '1') - 1;
if ($id < 0) {
    echo "Invalid start element ID.\n";
    exit(1);
}

$filename = $options['filename'] ?? 'dump.lsif';
if (!\is_string($filename) || \substr($filename, -5) !== '.lsif') {
    echo "Invalid filename. Must be a file ending with .lsif\n";
    exit(1);
}

$projectRoot = \getcwd();
$toolInfo = new ToolInfo('lsif-php', '0.0.6', \array_splice($argv, 1));

$git = new Git();
$emitter = new Emitter(
    filename: $filename,
    id: $id,
);
$indexer = new Indexer($projectRoot, $emitter, $toolInfo, $git->version());
$indexer->index();
$emitter->write();
